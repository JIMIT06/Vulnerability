import nmap
from flask import Flask, request, jsonify, render_template
from recon_tools import passive_recon, dns_lookup, active_recon, check_open_ports, smb_enumeration, ssh_bruteforce, load_passwords, load_config
import subprocess
app = Flask(__name__)

# Initialize nmap scanner
nm = nmap.PortScanner()

# Load configuration from the recon_tools module
config = load_config()


# Home page rendering
@app.route('/')
def index():
    return render_template('index.html')


# Passive Recon route
@app.route('/passive-recon', methods=['POST'])
def handle_passive_recon():
    data = request.get_json()
    domain = data['domain']
    result = passive_recon(domain)
    return jsonify(result)


# Active Recon route using Nmap
@app.route('/nmap_scan', methods=['POST'])
def nmap_scan():
    data = request.get_json()
    target = data['target']
    print(target)
    result = active_recon(target)
    return jsonify(result)


# Vulnerability Assessment route
@app.route('/vuln-assessment', methods=['POST'])
def handle_vuln_assessment():
    data = request.get_json()
    target = data['target']
    ports = data.get('ports', [])

    if not ports:
        return jsonify({'error': 'No ports provided for assessment.'}), 400

    # Create a comma-separated list of ports for nmap
    port_list = ','.join(map(str, ports))
    
    # Run nmap to identify services and versions
    result = subprocess.run(['nmap', '-sV', '-p', port_list, target], capture_output=True, text=True)

    # Parse the Nmap output
    nmap_output = parse_nmap_output(result.stdout)
    
    return jsonify(nmap_output)

def parse_nmap_output(output):
    """
    Parses the Nmap output and returns a structured JSON.
    """
    lines = output.splitlines()
    parsed_result = {
        'host': None,
        'ip': None,
        'ports': []
    }
    
    for line in lines:
        if "Nmap scan report for" in line:
            parts = line.split()
            parsed_result['host'] = parts[4]  # e.g., scanme.nmap.org
            parsed_result['ip'] = parts[5][1:-1]  # e.g., (45.33.32.156)
        
        elif "PORT" in line and "STATE" in line:
            continue  # Skip the header line
        
        elif line.strip():  # Non-empty line
            parts = line.split()
            if len(parts) >= 3:
                port_info = {
                    'port': parts[0],
                    'state': parts[1],
                    'service': parts[2],
                }
                if len(parts) > 3:
                    port_info['version'] = ' '.join(parts[3:])
                parsed_result['ports'].append(port_info)

    return parsed_result


# SMB Enumeration route
@app.route('/enumeration', methods=['POST'])
def handle_enumeration():
    data = request.get_json()
    target = data['target']
    result = smb_enumeration(target)
    return jsonify(result)


# SSH Exploit route
@app.route('/exploit', methods=['POST'])
def handle_exploit():
    data = request.get_json()
    target = data['target']
    username = data['username']
    password_list = load_passwords()  # Load passwords from JSON
    result = ssh_bruteforce(target, username, password_list)
    return jsonify(result)


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
